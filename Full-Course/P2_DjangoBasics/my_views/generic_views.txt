
****************************
Generic views
****************************

Use generic views: Less code is better ¶

We’re using two generic views here: ListView and DetailView.

ListView   = to display a list of objects
DetailView = to display a detail page for a particular type of object

1) Each generic view needs to know what model it will be acting upon.
  This is provided using the model attribute.

2) The DetailView expects the primary key value captured from the URL to be called "pk",
 so we’ve changed question_id to pk for the generic views.

********************

ListView generic view:

The ListView uses a default template called <app name>/<model name>_list.html.
We can use template_name to tell ListView to use our existing "my_views/index.html" template.

For ListView, the automatically generated context variable is car_list.
To override this we provide the context_object_name attribute, specifying that we want to use "my_cars" instead.
  (now it will use my_cars variable to get all cars that will be available in template)

********************

DetailView generic view:

By default, the DetailView uses a template called <app name>/<model name>_detail.html.
In our case, it would use the template "my_views/car_detail.html".

The template_name attribute is used to tell Django to use a specific template name instead of the autogenerated default template name.

For DetailView the 'car' variable is provided automatically – since we’re using a Django model (Car),
Django is able to determine an appropriate name for the context variable.

********************
