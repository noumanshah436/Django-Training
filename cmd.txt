Create Project heirarchy

1)

python -m venv myenv        -- create virtual environment
myenv\Scripts\activate      -- activate it


pip install django
pip install django-crispy-forms

2) django-admin startproject djangoPractice

3) To create your app, make sure you’re in the same directory as manage.py and type this command:
   python manage.py startapp myapp

4) Its useful to register app in settings.py file immediately
	'myapp.apps.MyappConfig'


myenv\Scripts\activate
cd mysite


python manage.py runserver


*********************************************************************************

Create views 

1) create urls.py in the app 

2) include this url file in main url file

from django.contrib import admin
from django.urls import path, include

urlpatterns = [                                  # note write / after route else it cause error
    path('admin/', admin.site.urls),
    path('myapp/', include('myapp.urls'))
]


3) craeate urls + views 

from django.urls import path
from . import views 

urlpatterns=[
    path( '', views.index , name="index" )

]

from django.http import HttpResponse
def index(requuest):
     return HttpResponse("hello world")



*********************************************************************************

render html :

1) first register app in settings.py file
'myapp.apps.MyappConfig'

2) create templates in myapp  ( by default django look in templates folder as base directory )

myapp -> templates  -> myapp -> index.html

3) create view 

from django.shortcuts import render

def index2(request):
    return render(request, "myapp/index.html")
    
*******

Your project’s TEMPLATES setting describes how Django will load and render templates. 
The default settings file configures a DjangoTemplates backend whose APP_DIRS option is set to True. By convention DjangoTemplates looks for a “templates” subdirectory in each of the INSTALLED_APPS.

*********

Here’s a setup that tells the Django template engine to load templates from the templates subdirectory inside each installed application:

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "APP_DIRS": True,
    },
]


************************************************************************************************************


creating models:

1)    

create model in model class ----

from django.db import models
from django.utils import timezone
from django.contrib.auth.models import User

class Post(models.Model):
    title = models.CharField(max_length=100)
    content = models.TextField()
    date_posted = models.DateTimeField(default=timezone.now)
    author = models.ForeignKey(User, on_delete=models.CASCADE)
    # on_delete : if the user is deleted , then we want to delete their posts as well

    def __str__(self):  # dunder(double underscore) str method
        return self.title


# DateTimeField(auto_now = True)   -> for last modified field
# DateTimeField(auto_now-add = True)   -> save current date when object is created but we cannot modify that date

2) 

create models and register in admin.py file in app

from .models import Post
admin.site.register(Question)


3)  

To run migrations we first need to create super user

	python manage.py createsuperuser

3)

Re run the Migrations commands in order to get changes to our database.

a) python manage.py makemigrations

b) python manage.py sqlmigrate blog 0001   #  it prints out the code that is going to run

c) python manage.py migrate


***************************

Manipulate database 

see official docs   ---  https://docs.djangoproject.com/en/4.0/intro/tutorial02/

Create User in cmd  ---  https://www.codegrepper.com/code-examples/python/django+add+user+command+line

1) python manage.py shell

2) >>> from app.Models import Post
3) >>> from django.contrib.auth.models import User

4) User.objects.all()
4) User.objects.first()
4) User.objects.filter(username='nouman')
4) User.objects.filter(username='nouman').first()


5) a) user = User.objects.filter(username='nouman').first()
   b)  user.post_set
   b)  user.post_set.all()


6) exit()  to exit from shell

see database.txt also



***************************************************************************************************


Forms:

1) pip install django-crispy-forms

2)register this app in settings.py 
'crispy_forms',

3) CRISPY_TEMPLATE_PACK = 'bootstrap4'


4) create forms.py file and creaete form:

from django import forms
class PostForm(forms.Form):
    title = forms.CharField(max_length=100)
    content = forms.CharField(widget=forms.Textarea)



5) create view as :

def new_post(request):
    if request.method == 'POST':
        # create a form instance and populate it with data from the request:
        form = PostForm(request.POST)
        # check whether it's valid:
        if form.is_valid():
            title = form.cleaned_data['title']
            content = form.cleaned_data['content']
            post = Post(title=title, content=content, author_id=1)
            post.save()
            return redirect('posts')
    else:
        form = PostForm()
    return render(request, 'myapp/myForm.html', {'form': form})


4) create html file myForm.html
  

************************************



load static data:


add this in settings.py file  ---  STATIC_URL = '/static/'

by default django look static file in this heirarchy ( so create this structure)
app -> static-> app-> staticfile

to add static file in html page:

{% load static %}

 <link rel="stylesheet" type="text/css" href="{% static 'myapp/bootstrap.min.css' %}">

****************************************





